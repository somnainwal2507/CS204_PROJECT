## Clock cycle: 00000001 ##

Step 1 => Fetch:
    PC: 0x00000000  |  Fetched IR: 0x100002B7

Step 2 => Decode:
    Instruction (IR): 0x100002B7
    Opcode: 0x00000037
    Type: U-Type
    rd: x5
    Immediate: 0x10000000

Step 3 => Execute:
    lui: x5 = 0x10000000

Step 4 => Memory Access:

Step 5 => Write back:
    x5 updated to 0x10000000

=============================== 

## Clock cycle: 00000002 ##

Step 1 => Fetch:
    PC: 0x00000004  |  Fetched IR: 0x0002A383

Step 2 => Decode:
    Instruction (IR): 0x0002A383
    Opcode: 0x00000003
    Type: I-Type
    rd: x7    rs1: x5
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000000 + 0x00000000 = 0x10000000

Step 4 => Memory Access:
    lw from address 0x10000000 => 0x00000001

Step 5 => Write back:
    x7 updated to 0x00000001 (loaded)

=============================== 

## Clock cycle: 00000003 ##

Step 1 => Fetch:
    PC: 0x00000008  |  Fetched IR: 0x00428293

Step 2 => Decode:
    Instruction (IR): 0x00428293
    Opcode: 0x00000013
    Type: I-Type
    rd: x5    rs1: x5
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x5 = 0x10000000 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x5 updated to 0x10000004

=============================== 

## Clock cycle: 00000004 ##

Step 1 => Fetch:
    PC: 0x0000000C  |  Fetched IR: 0x0002A403

Step 2 => Decode:
    Instruction (IR): 0x0002A403
    Opcode: 0x00000003
    Type: I-Type
    rd: x8    rs1: x5
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000004 + 0x00000000 = 0x10000004

Step 4 => Memory Access:
    lw from address 0x10000004 => 0x00000005

Step 5 => Write back:
    x8 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 00000005 ##

Step 1 => Fetch:
    PC: 0x00000010  |  Fetched IR: 0x00428293

Step 2 => Decode:
    Instruction (IR): 0x00428293
    Opcode: 0x00000013
    Type: I-Type
    rd: x5    rs1: x5
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x5 = 0x10000004 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x5 updated to 0x10000008

=============================== 

## Clock cycle: 00000006 ##

Step 1 => Fetch:
    PC: 0x00000014  |  Fetched IR: 0x10000337

Step 2 => Decode:
    Instruction (IR): 0x10000337
    Opcode: 0x00000037
    Type: U-Type
    rd: x6
    Immediate: 0x10000000

Step 3 => Execute:
    lui: x6 = 0x10000000

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000000

=============================== 

## Clock cycle: 00000007 ##

Step 1 => Fetch:
    PC: 0x00000018  |  Fetched IR: 0x50030313

Step 2 => Decode:
    Instruction (IR): 0x50030313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000500

Step 3 => Execute:
    addi: x6 = 0x10000000 + 0x00000500

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000500

=============================== 

## Clock cycle: 00000008 ##

Step 1 => Fetch:
    PC: 0x0000001C  |  Fetched IR: 0x000284B3

Step 2 => Decode:
    Instruction (IR): 0x000284B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x5    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000008 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000008

=============================== 

## Clock cycle: 00000009 ##

Step 1 => Fetch:
    PC: 0x00000020  |  Fetched IR: 0xFFF40513

Step 2 => Decode:
    Instruction (IR): 0xFFF40513
    Opcode: 0x00000013
    Type: I-Type
    rd: x10    rs1: x8
    funct3: 0x00000000    Immediate: 0xFFFFFFFF

Step 3 => Execute:
    addi: x10 = 0x00000005 + 0xFFFFFFFF

Step 4 => Memory Access:

Step 5 => Write back:
    x10 updated to 0x00000004

=============================== 

## Clock cycle: 0000000A ##

Step 1 => Fetch:
    PC: 0x00000024  |  Fetched IR: 0x000005B3

Step 2 => Decode:
    Instruction (IR): 0x000005B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x11    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x11 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000000

=============================== 

## Clock cycle: 0000000B ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x0085DE63

Step 2 => Decode:
    Instruction (IR): 0x0085DE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x0000001C

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000000C ##

Step 1 => Fetch:
    PC: 0x0000002C  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000008 + 0x00000000 = 0x10000008

Step 4 => Memory Access:
    lw from address 0x10000008 => 0x00000005

Step 5 => Write back:
    x14 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 0000000D ##

Step 1 => Fetch:
    PC: 0x00000030  |  Fetched IR: 0x00E32023

Step 2 => Decode:
    Instruction (IR): 0x00E32023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x6    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    sw store 0x00000005 to addresses starting at 0x10000500

Step 5 => Write back:

=============================== 

## Clock cycle: 0000000E ##

Step 1 => Fetch:
    PC: 0x00000034  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000001

=============================== 

## Clock cycle: 0000000F ##

Step 1 => Fetch:
    PC: 0x00000038  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000008 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x1000000C

=============================== 

## Clock cycle: 00000010 ##

Step 1 => Fetch:
    PC: 0x0000003C  |  Fetched IR: 0x00430313

Step 2 => Decode:
    Instruction (IR): 0x00430313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x6 = 0x10000500 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000504

=============================== 

## Clock cycle: 00000011 ##

Step 1 => Fetch:
    PC: 0x00000040  |  Fetched IR: 0xFE0004E3

Step 2 => Decode:
    Instruction (IR): 0xFE0004E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE8

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000028

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000012 ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x0085DE63

Step 2 => Decode:
    Instruction (IR): 0x0085DE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x0000001C

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000013 ##

Step 1 => Fetch:
    PC: 0x0000002C  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x1000000C + 0x00000000 = 0x1000000C

Step 4 => Memory Access:
    lw from address 0x1000000C => 0x00000004

Step 5 => Write back:
    x14 updated to 0x00000004 (loaded)

=============================== 

## Clock cycle: 00000014 ##

Step 1 => Fetch:
    PC: 0x00000030  |  Fetched IR: 0x00E32023

Step 2 => Decode:
    Instruction (IR): 0x00E32023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x6    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000004 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 00000015 ##

Step 1 => Fetch:
    PC: 0x00000034  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000001 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000002

=============================== 

## Clock cycle: 00000016 ##

Step 1 => Fetch:
    PC: 0x00000038  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x1000000C + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000010

=============================== 

## Clock cycle: 00000017 ##

Step 1 => Fetch:
    PC: 0x0000003C  |  Fetched IR: 0x00430313

Step 2 => Decode:
    Instruction (IR): 0x00430313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x6 = 0x10000504 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000508

=============================== 

## Clock cycle: 00000018 ##

Step 1 => Fetch:
    PC: 0x00000040  |  Fetched IR: 0xFE0004E3

Step 2 => Decode:
    Instruction (IR): 0xFE0004E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE8

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000028

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000019 ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x0085DE63

Step 2 => Decode:
    Instruction (IR): 0x0085DE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x0000001C

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000001A ##

Step 1 => Fetch:
    PC: 0x0000002C  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000010 + 0x00000000 = 0x10000010

Step 4 => Memory Access:
    lw from address 0x10000010 => 0x00000003

Step 5 => Write back:
    x14 updated to 0x00000003 (loaded)

=============================== 

## Clock cycle: 0000001B ##

Step 1 => Fetch:
    PC: 0x00000030  |  Fetched IR: 0x00E32023

Step 2 => Decode:
    Instruction (IR): 0x00E32023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x6    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000508 + 0x00000000 = 0x10000508

Step 4 => Memory Access:
    sw store 0x00000003 to addresses starting at 0x10000508

Step 5 => Write back:

=============================== 

## Clock cycle: 0000001C ##

Step 1 => Fetch:
    PC: 0x00000034  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000002 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000003

=============================== 

## Clock cycle: 0000001D ##

Step 1 => Fetch:
    PC: 0x00000038  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000010 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000014

=============================== 

## Clock cycle: 0000001E ##

Step 1 => Fetch:
    PC: 0x0000003C  |  Fetched IR: 0x00430313

Step 2 => Decode:
    Instruction (IR): 0x00430313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x6 = 0x10000508 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x1000050C

=============================== 

## Clock cycle: 0000001F ##

Step 1 => Fetch:
    PC: 0x00000040  |  Fetched IR: 0xFE0004E3

Step 2 => Decode:
    Instruction (IR): 0xFE0004E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE8

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000028

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000020 ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x0085DE63

Step 2 => Decode:
    Instruction (IR): 0x0085DE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x0000001C

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000021 ##

Step 1 => Fetch:
    PC: 0x0000002C  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000014 + 0x00000000 = 0x10000014

Step 4 => Memory Access:
    lw from address 0x10000014 => 0x00000002

Step 5 => Write back:
    x14 updated to 0x00000002 (loaded)

=============================== 

## Clock cycle: 00000022 ##

Step 1 => Fetch:
    PC: 0x00000030  |  Fetched IR: 0x00E32023

Step 2 => Decode:
    Instruction (IR): 0x00E32023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x6    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x1000050C + 0x00000000 = 0x1000050C

Step 4 => Memory Access:
    sw store 0x00000002 to addresses starting at 0x1000050C

Step 5 => Write back:

=============================== 

## Clock cycle: 00000023 ##

Step 1 => Fetch:
    PC: 0x00000034  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000003 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000004

=============================== 

## Clock cycle: 00000024 ##

Step 1 => Fetch:
    PC: 0x00000038  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000014 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000018

=============================== 

## Clock cycle: 00000025 ##

Step 1 => Fetch:
    PC: 0x0000003C  |  Fetched IR: 0x00430313

Step 2 => Decode:
    Instruction (IR): 0x00430313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x6 = 0x1000050C + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000510

=============================== 

## Clock cycle: 00000026 ##

Step 1 => Fetch:
    PC: 0x00000040  |  Fetched IR: 0xFE0004E3

Step 2 => Decode:
    Instruction (IR): 0xFE0004E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE8

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000028

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000027 ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x0085DE63

Step 2 => Decode:
    Instruction (IR): 0x0085DE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x0000001C

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000028 ##

Step 1 => Fetch:
    PC: 0x0000002C  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000018 + 0x00000000 = 0x10000018

Step 4 => Memory Access:
    lw from address 0x10000018 => 0x00000001

Step 5 => Write back:
    x14 updated to 0x00000001 (loaded)

=============================== 

## Clock cycle: 00000029 ##

Step 1 => Fetch:
    PC: 0x00000030  |  Fetched IR: 0x00E32023

Step 2 => Decode:
    Instruction (IR): 0x00E32023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x6    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000510 + 0x00000000 = 0x10000510

Step 4 => Memory Access:
    sw store 0x00000001 to addresses starting at 0x10000510

Step 5 => Write back:

=============================== 

## Clock cycle: 0000002A ##

Step 1 => Fetch:
    PC: 0x00000034  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000004 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000005

=============================== 

## Clock cycle: 0000002B ##

Step 1 => Fetch:
    PC: 0x00000038  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000018 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x1000001C

=============================== 

## Clock cycle: 0000002C ##

Step 1 => Fetch:
    PC: 0x0000003C  |  Fetched IR: 0x00430313

Step 2 => Decode:
    Instruction (IR): 0x00430313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x6 = 0x10000510 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000514

=============================== 

## Clock cycle: 0000002D ##

Step 1 => Fetch:
    PC: 0x00000040  |  Fetched IR: 0xFE0004E3

Step 2 => Decode:
    Instruction (IR): 0xFE0004E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE8

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000028

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000002E ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x0085DE63

Step 2 => Decode:
    Instruction (IR): 0x0085DE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x0000001C

Step 3 => Execute:
    bge: taken | Branch taken, New PC: 0x00000044

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000002F ##

Step 1 => Fetch:
    PC: 0x00000044  |  Fetched IR: 0x10000337

Step 2 => Decode:
    Instruction (IR): 0x10000337
    Opcode: 0x00000037
    Type: U-Type
    rd: x6
    Immediate: 0x10000000

Step 3 => Execute:
    lui: x6 = 0x10000000

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000000

=============================== 

## Clock cycle: 00000030 ##

Step 1 => Fetch:
    PC: 0x00000048  |  Fetched IR: 0x50030313

Step 2 => Decode:
    Instruction (IR): 0x50030313
    Opcode: 0x00000013
    Type: I-Type
    rd: x6    rs1: x6
    funct3: 0x00000000    Immediate: 0x00000500

Step 3 => Execute:
    addi: x6 = 0x10000000 + 0x00000500

Step 4 => Memory Access:

Step 5 => Write back:
    x6 updated to 0x10000500

=============================== 

## Clock cycle: 00000031 ##

Step 1 => Fetch:
    PC: 0x0000004C  |  Fetched IR: 0x000304B3

Step 2 => Decode:
    Instruction (IR): 0x000304B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x6    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000500 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000500

=============================== 

## Clock cycle: 00000032 ##

Step 1 => Fetch:
    PC: 0x00000050  |  Fetched IR: 0x00038E63

Step 2 => Decode:
    Instruction (IR): 0x00038E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x7    rs2: x0
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000033 ##

Step 1 => Fetch:
    PC: 0x00000054  |  Fetched IR: 0x00100A13

Step 2 => Decode:
    Instruction (IR): 0x00100A13
    Opcode: 0x00000013
    Type: I-Type
    rd: x20    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x20 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x20 updated to 0x00000001

=============================== 

## Clock cycle: 00000034 ##

Step 1 => Fetch:
    PC: 0x00000058  |  Fetched IR: 0x05438463

Step 2 => Decode:
    Instruction (IR): 0x05438463
    Opcode: 0x00000063
    Type: B-Type
    rs1: x7    rs2: x20
    funct3: 0x00000000    Immediate: 0x00000048

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000A0

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000035 ##

Step 1 => Fetch:
    PC: 0x000000A0  |  Fetched IR: 0x000005B3

Step 2 => Decode:
    Instruction (IR): 0x000005B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x11    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x11 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000000

=============================== 

## Clock cycle: 00000036 ##

Step 1 => Fetch:
    PC: 0x000000A4  |  Fetched IR: 0x0485D863

Step 2 => Decode:
    Instruction (IR): 0x0485D863
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x00000050

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000037 ##

Step 1 => Fetch:
    PC: 0x000000A8  |  Fetched IR: 0x00000633

Step 2 => Decode:
    Instruction (IR): 0x00000633
    Opcode: 0x00000033
    Type: R-Type
    rd: x12    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x12 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000000

=============================== 

## Clock cycle: 00000038 ##

Step 1 => Fetch:
    PC: 0x000000AC  |  Fetched IR: 0x000304B3

Step 2 => Decode:
    Instruction (IR): 0x000304B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x6    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000500 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000500

=============================== 

## Clock cycle: 00000039 ##

Step 1 => Fetch:
    PC: 0x000000B0  |  Fetched IR: 0x00000B33

Step 2 => Decode:
    Instruction (IR): 0x00000B33
    Opcode: 0x00000033
    Type: R-Type
    rd: x22    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x22 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000000

=============================== 

## Clock cycle: 0000003A ##

Step 1 => Fetch:
    PC: 0x000000B4  |  Fetched IR: 0x40B50BB3

Step 2 => Decode:
    Instruction (IR): 0x40B50BB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x23    rs1: x10    rs2: x11
    funct3: 0x00000000    funct7: 0x00000020

Step 3 => Execute:
    sub: x23 = 0x00000004 - 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x23 updated to 0x00000004

=============================== 

## Clock cycle: 0000003B ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000003C ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000003D ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    lw from address 0x10000500 => 0x00000005

Step 5 => Write back:
    x14 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 0000003E ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000004

Step 5 => Write back:
    x15 updated to 0x00000004 (loaded)

=============================== 

## Clock cycle: 0000003F ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000040 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 00000041 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000005 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 00000042 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    sw store 0x00000004 to addresses starting at 0x10000500

Step 5 => Write back:

=============================== 

## Clock cycle: 00000043 ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000044 ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000001

=============================== 

## Clock cycle: 00000045 ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000500 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000504

=============================== 

## Clock cycle: 00000046 ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000047 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000048 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000049 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000005

Step 5 => Write back:
    x14 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 0000004A ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000504 + 0x00000004 = 0x10000508

Step 4 => Memory Access:
    lw from address 0x10000508 => 0x00000003

Step 5 => Write back:
    x15 updated to 0x00000003 (loaded)

=============================== 

## Clock cycle: 0000004B ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000004C ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 0000004D ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000004 = 0x10000508

Step 4 => Memory Access:
    sw store 0x00000005 to addresses starting at 0x10000508

Step 5 => Write back:

=============================== 

## Clock cycle: 0000004E ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000003 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 0000004F ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000050 ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000001 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000002

=============================== 

## Clock cycle: 00000051 ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000504 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000508

=============================== 

## Clock cycle: 00000052 ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000053 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000054 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000055 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000508 + 0x00000000 = 0x10000508

Step 4 => Memory Access:
    lw from address 0x10000508 => 0x00000005

Step 5 => Write back:
    x14 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 00000056 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000508 + 0x00000004 = 0x1000050C

Step 4 => Memory Access:
    lw from address 0x1000050C => 0x00000002

Step 5 => Write back:
    x15 updated to 0x00000002 (loaded)

=============================== 

## Clock cycle: 00000057 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000058 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 00000059 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000508 + 0x00000004 = 0x1000050C

Step 4 => Memory Access:
    sw store 0x00000005 to addresses starting at 0x1000050C

Step 5 => Write back:

=============================== 

## Clock cycle: 0000005A ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000508 + 0x00000000 = 0x10000508

Step 4 => Memory Access:
    sw store 0x00000002 to addresses starting at 0x10000508

Step 5 => Write back:

=============================== 

## Clock cycle: 0000005B ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000005C ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000002 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000003

=============================== 

## Clock cycle: 0000005D ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000508 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x1000050C

=============================== 

## Clock cycle: 0000005E ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000005F ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000060 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000061 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x1000050C + 0x00000000 = 0x1000050C

Step 4 => Memory Access:
    lw from address 0x1000050C => 0x00000005

Step 5 => Write back:
    x14 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 00000062 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x1000050C + 0x00000004 = 0x10000510

Step 4 => Memory Access:
    lw from address 0x10000510 => 0x00000001

Step 5 => Write back:
    x15 updated to 0x00000001 (loaded)

=============================== 

## Clock cycle: 00000063 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000064 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 00000065 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x1000050C + 0x00000004 = 0x10000510

Step 4 => Memory Access:
    sw store 0x00000005 to addresses starting at 0x10000510

Step 5 => Write back:

=============================== 

## Clock cycle: 00000066 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x1000050C + 0x00000000 = 0x1000050C

Step 4 => Memory Access:
    sw store 0x00000001 to addresses starting at 0x1000050C

Step 5 => Write back:

=============================== 

## Clock cycle: 00000067 ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000068 ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000003 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000004

=============================== 

## Clock cycle: 00000069 ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x1000050C + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000510

=============================== 

## Clock cycle: 0000006A ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000006B ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: taken | Branch taken, New PC: 0x000000D8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000006C ##

Step 1 => Fetch:
    PC: 0x000000D8  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000001

=============================== 

## Clock cycle: 0000006D ##

Step 1 => Fetch:
    PC: 0x000000DC  |  Fetched IR: 0x000B0C63

Step 2 => Decode:
    Instruction (IR): 0x000B0C63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x22    rs2: x0
    funct3: 0x00000000    Immediate: 0x00000018

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000006E ##

Step 1 => Fetch:
    PC: 0x000000E0  |  Fetched IR: 0xFC0002E3

Step 2 => Decode:
    Instruction (IR): 0xFC0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFC4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000A4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000006F ##

Step 1 => Fetch:
    PC: 0x000000A4  |  Fetched IR: 0x0485D863

Step 2 => Decode:
    Instruction (IR): 0x0485D863
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x00000050

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000070 ##

Step 1 => Fetch:
    PC: 0x000000A8  |  Fetched IR: 0x00000633

Step 2 => Decode:
    Instruction (IR): 0x00000633
    Opcode: 0x00000033
    Type: R-Type
    rd: x12    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x12 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000000

=============================== 

## Clock cycle: 00000071 ##

Step 1 => Fetch:
    PC: 0x000000AC  |  Fetched IR: 0x000304B3

Step 2 => Decode:
    Instruction (IR): 0x000304B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x6    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000500 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000500

=============================== 

## Clock cycle: 00000072 ##

Step 1 => Fetch:
    PC: 0x000000B0  |  Fetched IR: 0x00000B33

Step 2 => Decode:
    Instruction (IR): 0x00000B33
    Opcode: 0x00000033
    Type: R-Type
    rd: x22    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x22 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000000

=============================== 

## Clock cycle: 00000073 ##

Step 1 => Fetch:
    PC: 0x000000B4  |  Fetched IR: 0x40B50BB3

Step 2 => Decode:
    Instruction (IR): 0x40B50BB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x23    rs1: x10    rs2: x11
    funct3: 0x00000000    funct7: 0x00000020

Step 3 => Execute:
    sub: x23 = 0x00000004 - 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x23 updated to 0x00000003

=============================== 

## Clock cycle: 00000074 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000075 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000076 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    lw from address 0x10000500 => 0x00000004

Step 5 => Write back:
    x14 updated to 0x00000004 (loaded)

=============================== 

## Clock cycle: 00000077 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000003

Step 5 => Write back:
    x15 updated to 0x00000003 (loaded)

=============================== 

## Clock cycle: 00000078 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000079 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 0000007A ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000004 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 0000007B ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    sw store 0x00000003 to addresses starting at 0x10000500

Step 5 => Write back:

=============================== 

## Clock cycle: 0000007C ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000007D ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000001

=============================== 

## Clock cycle: 0000007E ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000500 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000504

=============================== 

## Clock cycle: 0000007F ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000080 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000081 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000082 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000004

Step 5 => Write back:
    x14 updated to 0x00000004 (loaded)

=============================== 

## Clock cycle: 00000083 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000504 + 0x00000004 = 0x10000508

Step 4 => Memory Access:
    lw from address 0x10000508 => 0x00000002

Step 5 => Write back:
    x15 updated to 0x00000002 (loaded)

=============================== 

## Clock cycle: 00000084 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000085 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 00000086 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000004 = 0x10000508

Step 4 => Memory Access:
    sw store 0x00000004 to addresses starting at 0x10000508

Step 5 => Write back:

=============================== 

## Clock cycle: 00000087 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000002 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 00000088 ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000089 ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000001 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000002

=============================== 

## Clock cycle: 0000008A ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000504 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000508

=============================== 

## Clock cycle: 0000008B ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000008C ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000008D ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000008E ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000508 + 0x00000000 = 0x10000508

Step 4 => Memory Access:
    lw from address 0x10000508 => 0x00000004

Step 5 => Write back:
    x14 updated to 0x00000004 (loaded)

=============================== 

## Clock cycle: 0000008F ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000508 + 0x00000004 = 0x1000050C

Step 4 => Memory Access:
    lw from address 0x1000050C => 0x00000001

Step 5 => Write back:
    x15 updated to 0x00000001 (loaded)

=============================== 

## Clock cycle: 00000090 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000091 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 00000092 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000508 + 0x00000004 = 0x1000050C

Step 4 => Memory Access:
    sw store 0x00000004 to addresses starting at 0x1000050C

Step 5 => Write back:

=============================== 

## Clock cycle: 00000093 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000508 + 0x00000000 = 0x10000508

Step 4 => Memory Access:
    sw store 0x00000001 to addresses starting at 0x10000508

Step 5 => Write back:

=============================== 

## Clock cycle: 00000094 ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000095 ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000002 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000003

=============================== 

## Clock cycle: 00000096 ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000508 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x1000050C

=============================== 

## Clock cycle: 00000097 ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000098 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: taken | Branch taken, New PC: 0x000000D8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000099 ##

Step 1 => Fetch:
    PC: 0x000000D8  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000001 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000002

=============================== 

## Clock cycle: 0000009A ##

Step 1 => Fetch:
    PC: 0x000000DC  |  Fetched IR: 0x000B0C63

Step 2 => Decode:
    Instruction (IR): 0x000B0C63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x22    rs2: x0
    funct3: 0x00000000    Immediate: 0x00000018

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000009B ##

Step 1 => Fetch:
    PC: 0x000000E0  |  Fetched IR: 0xFC0002E3

Step 2 => Decode:
    Instruction (IR): 0xFC0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFC4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000A4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000009C ##

Step 1 => Fetch:
    PC: 0x000000A4  |  Fetched IR: 0x0485D863

Step 2 => Decode:
    Instruction (IR): 0x0485D863
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x00000050

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000009D ##

Step 1 => Fetch:
    PC: 0x000000A8  |  Fetched IR: 0x00000633

Step 2 => Decode:
    Instruction (IR): 0x00000633
    Opcode: 0x00000033
    Type: R-Type
    rd: x12    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x12 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000000

=============================== 

## Clock cycle: 0000009E ##

Step 1 => Fetch:
    PC: 0x000000AC  |  Fetched IR: 0x000304B3

Step 2 => Decode:
    Instruction (IR): 0x000304B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x6    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000500 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000500

=============================== 

## Clock cycle: 0000009F ##

Step 1 => Fetch:
    PC: 0x000000B0  |  Fetched IR: 0x00000B33

Step 2 => Decode:
    Instruction (IR): 0x00000B33
    Opcode: 0x00000033
    Type: R-Type
    rd: x22    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x22 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000000

=============================== 

## Clock cycle: 000000A0 ##

Step 1 => Fetch:
    PC: 0x000000B4  |  Fetched IR: 0x40B50BB3

Step 2 => Decode:
    Instruction (IR): 0x40B50BB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x23    rs1: x10    rs2: x11
    funct3: 0x00000000    funct7: 0x00000020

Step 3 => Execute:
    sub: x23 = 0x00000004 - 0x00000002

Step 4 => Memory Access:

Step 5 => Write back:
    x23 updated to 0x00000002

=============================== 

## Clock cycle: 000000A1 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000A2 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000A3 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    lw from address 0x10000500 => 0x00000003

Step 5 => Write back:
    x14 updated to 0x00000003 (loaded)

=============================== 

## Clock cycle: 000000A4 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000002

Step 5 => Write back:
    x15 updated to 0x00000002 (loaded)

=============================== 

## Clock cycle: 000000A5 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000A6 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 000000A7 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000003 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 000000A8 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    sw store 0x00000002 to addresses starting at 0x10000500

Step 5 => Write back:

=============================== 

## Clock cycle: 000000A9 ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000AA ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000001

=============================== 

## Clock cycle: 000000AB ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000500 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000504

=============================== 

## Clock cycle: 000000AC ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000AD ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000AE ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000AF ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000003

Step 5 => Write back:
    x14 updated to 0x00000003 (loaded)

=============================== 

## Clock cycle: 000000B0 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000504 + 0x00000004 = 0x10000508

Step 4 => Memory Access:
    lw from address 0x10000508 => 0x00000001

Step 5 => Write back:
    x15 updated to 0x00000001 (loaded)

=============================== 

## Clock cycle: 000000B1 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000B2 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 000000B3 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000004 = 0x10000508

Step 4 => Memory Access:
    sw store 0x00000003 to addresses starting at 0x10000508

Step 5 => Write back:

=============================== 

## Clock cycle: 000000B4 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000504 + 0x00000000 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000001 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 000000B5 ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000B6 ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000001 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000002

=============================== 

## Clock cycle: 000000B7 ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000504 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000508

=============================== 

## Clock cycle: 000000B8 ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000B9 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: taken | Branch taken, New PC: 0x000000D8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000BA ##

Step 1 => Fetch:
    PC: 0x000000D8  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000002 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000003

=============================== 

## Clock cycle: 000000BB ##

Step 1 => Fetch:
    PC: 0x000000DC  |  Fetched IR: 0x000B0C63

Step 2 => Decode:
    Instruction (IR): 0x000B0C63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x22    rs2: x0
    funct3: 0x00000000    Immediate: 0x00000018

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000BC ##

Step 1 => Fetch:
    PC: 0x000000E0  |  Fetched IR: 0xFC0002E3

Step 2 => Decode:
    Instruction (IR): 0xFC0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFC4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000A4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000BD ##

Step 1 => Fetch:
    PC: 0x000000A4  |  Fetched IR: 0x0485D863

Step 2 => Decode:
    Instruction (IR): 0x0485D863
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x00000050

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000BE ##

Step 1 => Fetch:
    PC: 0x000000A8  |  Fetched IR: 0x00000633

Step 2 => Decode:
    Instruction (IR): 0x00000633
    Opcode: 0x00000033
    Type: R-Type
    rd: x12    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x12 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000000

=============================== 

## Clock cycle: 000000BF ##

Step 1 => Fetch:
    PC: 0x000000AC  |  Fetched IR: 0x000304B3

Step 2 => Decode:
    Instruction (IR): 0x000304B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x6    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000500 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000500

=============================== 

## Clock cycle: 000000C0 ##

Step 1 => Fetch:
    PC: 0x000000B0  |  Fetched IR: 0x00000B33

Step 2 => Decode:
    Instruction (IR): 0x00000B33
    Opcode: 0x00000033
    Type: R-Type
    rd: x22    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x22 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000000

=============================== 

## Clock cycle: 000000C1 ##

Step 1 => Fetch:
    PC: 0x000000B4  |  Fetched IR: 0x40B50BB3

Step 2 => Decode:
    Instruction (IR): 0x40B50BB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x23    rs1: x10    rs2: x11
    funct3: 0x00000000    funct7: 0x00000020

Step 3 => Execute:
    sub: x23 = 0x00000004 - 0x00000003

Step 4 => Memory Access:

Step 5 => Write back:
    x23 updated to 0x00000001

=============================== 

## Clock cycle: 000000C2 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000C3 ##

Step 1 => Fetch:
    PC: 0x000000BC  |  Fetched IR: 0x00A60E63

Step 2 => Decode:
    Instruction (IR): 0x00A60E63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x10
    funct3: 0x00000000    Immediate: 0x0000001C

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000C4 ##

Step 1 => Fetch:
    PC: 0x000000C0  |  Fetched IR: 0x0004A703

Step 2 => Decode:
    Instruction (IR): 0x0004A703
    Opcode: 0x00000003
    Type: I-Type
    rd: x14    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    lw from address 0x10000500 => 0x00000002

Step 5 => Write back:
    x14 updated to 0x00000002 (loaded)

=============================== 

## Clock cycle: 000000C5 ##

Step 1 => Fetch:
    PC: 0x000000C4  |  Fetched IR: 0x0044A783

Step 2 => Decode:
    Instruction (IR): 0x0044A783
    Opcode: 0x00000003
    Type: I-Type
    rd: x15    rs1: x9
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    lw from address 0x10000504 => 0x00000001

Step 5 => Write back:
    x15 updated to 0x00000001 (loaded)

=============================== 

## Clock cycle: 000000C6 ##

Step 1 => Fetch:
    PC: 0x000000C8  |  Fetched IR: 0x00E7CE63

Step 2 => Decode:
    Instruction (IR): 0x00E7CE63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x15    rs2: x14
    funct3: 0x00000004    Immediate: 0x0000001C

Step 3 => Execute:
    blt: taken | Branch taken, New PC: 0x000000E4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000C7 ##

Step 1 => Fetch:
    PC: 0x000000E4  |  Fetched IR: 0x00100B13

Step 2 => Decode:
    Instruction (IR): 0x00100B13
    Opcode: 0x00000013
    Type: I-Type
    rd: x22    rs1: x0
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x22 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000001

=============================== 

## Clock cycle: 000000C8 ##

Step 1 => Fetch:
    PC: 0x000000E8  |  Fetched IR: 0x00E4A223

Step 2 => Decode:
    Instruction (IR): 0x00E4A223
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x14
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000004 = 0x10000504

Step 4 => Memory Access:
    sw store 0x00000002 to addresses starting at 0x10000504

Step 5 => Write back:

=============================== 

## Clock cycle: 000000C9 ##

Step 1 => Fetch:
    PC: 0x000000EC  |  Fetched IR: 0x00F4A023

Step 2 => Decode:
    Instruction (IR): 0x00F4A023
    Opcode: 0x00000023
    Type: S-Type
    rs1: x9    rs2: x15
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Store Effective Address: 0x10000500 + 0x00000000 = 0x10000500

Step 4 => Memory Access:
    sw store 0x00000001 to addresses starting at 0x10000500

Step 5 => Write back:

=============================== 

## Clock cycle: 000000CA ##

Step 1 => Fetch:
    PC: 0x000000F0  |  Fetched IR: 0xFC000EE3

Step 2 => Decode:
    Instruction (IR): 0xFC000EE3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFDC

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000CC

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000CB ##

Step 1 => Fetch:
    PC: 0x000000CC  |  Fetched IR: 0x00160613

Step 2 => Decode:
    Instruction (IR): 0x00160613
    Opcode: 0x00000013
    Type: I-Type
    rd: x12    rs1: x12
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x12 = 0x00000000 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000001

=============================== 

## Clock cycle: 000000CC ##

Step 1 => Fetch:
    PC: 0x000000D0  |  Fetched IR: 0x00448493

Step 2 => Decode:
    Instruction (IR): 0x00448493
    Opcode: 0x00000013
    Type: I-Type
    rd: x9    rs1: x9
    funct3: 0x00000000    Immediate: 0x00000004

Step 3 => Execute:
    addi: x9 = 0x10000500 + 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000504

=============================== 

## Clock cycle: 000000CD ##

Step 1 => Fetch:
    PC: 0x000000D4  |  Fetched IR: 0xFE0002E3

Step 2 => Decode:
    Instruction (IR): 0xFE0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFE4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000B8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000CE ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: taken | Branch taken, New PC: 0x000000D8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000CF ##

Step 1 => Fetch:
    PC: 0x000000D8  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000003 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000004

=============================== 

## Clock cycle: 000000D0 ##

Step 1 => Fetch:
    PC: 0x000000DC  |  Fetched IR: 0x000B0C63

Step 2 => Decode:
    Instruction (IR): 0x000B0C63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x22    rs2: x0
    funct3: 0x00000000    Immediate: 0x00000018

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000D1 ##

Step 1 => Fetch:
    PC: 0x000000E0  |  Fetched IR: 0xFC0002E3

Step 2 => Decode:
    Instruction (IR): 0xFC0002E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFC4

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000A4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000D2 ##

Step 1 => Fetch:
    PC: 0x000000A4  |  Fetched IR: 0x0485D863

Step 2 => Decode:
    Instruction (IR): 0x0485D863
    Opcode: 0x00000063
    Type: B-Type
    rs1: x11    rs2: x8
    funct3: 0x00000005    Immediate: 0x00000050

Step 3 => Execute:
    bge: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000D3 ##

Step 1 => Fetch:
    PC: 0x000000A8  |  Fetched IR: 0x00000633

Step 2 => Decode:
    Instruction (IR): 0x00000633
    Opcode: 0x00000033
    Type: R-Type
    rd: x12    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x12 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x12 updated to 0x00000000

=============================== 

## Clock cycle: 000000D4 ##

Step 1 => Fetch:
    PC: 0x000000AC  |  Fetched IR: 0x000304B3

Step 2 => Decode:
    Instruction (IR): 0x000304B3
    Opcode: 0x00000033
    Type: R-Type
    rd: x9    rs1: x6    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x9 = 0x10000500 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x9 updated to 0x10000500

=============================== 

## Clock cycle: 000000D5 ##

Step 1 => Fetch:
    PC: 0x000000B0  |  Fetched IR: 0x00000B33

Step 2 => Decode:
    Instruction (IR): 0x00000B33
    Opcode: 0x00000033
    Type: R-Type
    rd: x22    rs1: x0    rs2: x0
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x22 = 0x00000000 + 0x00000000

Step 4 => Memory Access:

Step 5 => Write back:
    x22 updated to 0x00000000

=============================== 

## Clock cycle: 000000D6 ##

Step 1 => Fetch:
    PC: 0x000000B4  |  Fetched IR: 0x40B50BB3

Step 2 => Decode:
    Instruction (IR): 0x40B50BB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x23    rs1: x10    rs2: x11
    funct3: 0x00000000    funct7: 0x00000020

Step 3 => Execute:
    sub: x23 = 0x00000004 - 0x00000004

Step 4 => Memory Access:

Step 5 => Write back:
    x23 updated to 0x00000000

=============================== 

## Clock cycle: 000000D7 ##

Step 1 => Fetch:
    PC: 0x000000B8  |  Fetched IR: 0x03765063

Step 2 => Decode:
    Instruction (IR): 0x03765063
    Opcode: 0x00000063
    Type: B-Type
    rs1: x12    rs2: x23
    funct3: 0x00000005    Immediate: 0x00000020

Step 3 => Execute:
    bge: taken | Branch taken, New PC: 0x000000D8

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 000000D8 ##

Step 1 => Fetch:
    PC: 0x000000D8  |  Fetched IR: 0x00158593

Step 2 => Decode:
    Instruction (IR): 0x00158593
    Opcode: 0x00000013
    Type: I-Type
    rd: x11    rs1: x11
    funct3: 0x00000000    Immediate: 0x00000001

Step 3 => Execute:
    addi: x11 = 0x00000004 + 0x00000001

Step 4 => Memory Access:

Step 5 => Write back:
    x11 updated to 0x00000005

=============================== 

## Clock cycle: 000000D9 ##

Step 1 => Fetch:
    PC: 0x000000DC  |  Fetched IR: 0x000B0C63

Step 2 => Decode:
    Instruction (IR): 0x000B0C63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x22    rs2: x0
    funct3: 0x00000000    Immediate: 0x00000018

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x000000F4

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

No instruction found at PC = 0x000000F4. Halting.

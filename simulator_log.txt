## Clock cycle: 00000001 ##

Step 1 => Fetch:
    PC: 0x00000000  |  Fetched IR: 0x100002B7

Step 2 => Decode:
    Instruction (IR): 0x100002B7
    Opcode: 0x00000037
    Type: U-Type
    rd: x5
    Immediate: 0x10000000

Step 3 => Execute:
    lui: x5 = 0x10000000

Step 4 => Memory Access:

Step 5 => Write back:
    x5 updated to 0x10000000

=============================== 

## Clock cycle: 00000002 ##

Step 1 => Fetch:
    PC: 0x00000004  |  Fetched IR: 0x0002AF83

Step 2 => Decode:
    Instruction (IR): 0x0002AF83
    Opcode: 0x00000003
    Type: I-Type
    rd: x31    rs1: x5
    funct3: 0x00000002    Immediate: 0x00000000

Step 3 => Execute:
    Load Effective Address: 0x10000000 + 0x00000000 = 0x10000000

Step 4 => Memory Access:
    lw from address 0x10000000 => 0x00000005

Step 5 => Write back:
    x31 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 00000003 ##

Step 1 => Fetch:
    PC: 0x00000008  |  Fetched IR: 0x0042AF03

Step 2 => Decode:
    Instruction (IR): 0x0042AF03
    Opcode: 0x00000003
    Type: I-Type
    rd: x30    rs1: x5
    funct3: 0x00000002    Immediate: 0x00000004

Step 3 => Execute:
    Load Effective Address: 0x10000000 + 0x00000004 = 0x10000004

Step 4 => Memory Access:
    lw from address 0x10000004 => 0x0000000F

Step 5 => Write back:
    x30 updated to 0x0000000F (loaded)

=============================== 

## Clock cycle: 00000004 ##

Step 1 => Fetch:
    PC: 0x0000000C  |  Fetched IR: 0x0082AA03

Step 2 => Decode:
    Instruction (IR): 0x0082AA03
    Opcode: 0x00000003
    Type: I-Type
    rd: x20    rs1: x5
    funct3: 0x00000002    Immediate: 0x00000008

Step 3 => Execute:
    Load Effective Address: 0x10000000 + 0x00000008 = 0x10000008

Step 4 => Memory Access:
    lw from address 0x10000008 => 0x00000019

Step 5 => Write back:
    x20 updated to 0x00000019 (loaded)

=============================== 

## Clock cycle: 00000005 ##

Step 1 => Fetch:
    PC: 0x00000010  |  Fetched IR: 0x01E00A63

Step 2 => Decode:
    Instruction (IR): 0x01E00A63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x30
    funct3: 0x00000000    Immediate: 0x00000014

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000006 ##

Step 1 => Fetch:
    PC: 0x00000014  |  Fetched IR: 0x01E00EB3

Step 2 => Decode:
    Instruction (IR): 0x01E00EB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x29    rs1: x0    rs2: x30
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x29 = 0x00000000 + 0x0000000F

Step 4 => Memory Access:

Step 5 => Write back:
    x29 updated to 0x0000000F

=============================== 

## Clock cycle: 00000007 ##

Step 1 => Fetch:
    PC: 0x00000018  |  Fetched IR: 0x03EFEF33

Step 2 => Decode:
    Instruction (IR): 0x03EFEF33
    Opcode: 0x00000033
    Type: R-Type
    rd: x30    rs1: x31    rs2: x30
    funct3: 0x00000006    funct7: 0x00000001

Step 3 => Execute:
    rem: x30 = 0x00000005 % 0x0000000F

Step 4 => Memory Access:

Step 5 => Write back:
    x30 updated to 0x00000005

=============================== 

## Clock cycle: 00000008 ##

Step 1 => Fetch:
    PC: 0x0000001C  |  Fetched IR: 0x01D00FB3

Step 2 => Decode:
    Instruction (IR): 0x01D00FB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x31    rs1: x0    rs2: x29
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x31 = 0x00000000 + 0x0000000F

Step 4 => Memory Access:

Step 5 => Write back:
    x31 updated to 0x0000000F

=============================== 

## Clock cycle: 00000009 ##

Step 1 => Fetch:
    PC: 0x00000020  |  Fetched IR: 0xFE0008E3

Step 2 => Decode:
    Instruction (IR): 0xFE0008E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFF0

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000010

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000000A ##

Step 1 => Fetch:
    PC: 0x00000010  |  Fetched IR: 0x01E00A63

Step 2 => Decode:
    Instruction (IR): 0x01E00A63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x30
    funct3: 0x00000000    Immediate: 0x00000014

Step 3 => Execute:
    beq: not taken

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000000B ##

Step 1 => Fetch:
    PC: 0x00000014  |  Fetched IR: 0x01E00EB3

Step 2 => Decode:
    Instruction (IR): 0x01E00EB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x29    rs1: x0    rs2: x30
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x29 = 0x00000000 + 0x00000005

Step 4 => Memory Access:

Step 5 => Write back:
    x29 updated to 0x00000005

=============================== 

## Clock cycle: 0000000C ##

Step 1 => Fetch:
    PC: 0x00000018  |  Fetched IR: 0x03EFEF33

Step 2 => Decode:
    Instruction (IR): 0x03EFEF33
    Opcode: 0x00000033
    Type: R-Type
    rd: x30    rs1: x31    rs2: x30
    funct3: 0x00000006    funct7: 0x00000001

Step 3 => Execute:
    rem: x30 = 0x0000000F % 0x00000005

Step 4 => Memory Access:

Step 5 => Write back:
    x30 updated to 0x00000000

=============================== 

## Clock cycle: 0000000D ##

Step 1 => Fetch:
    PC: 0x0000001C  |  Fetched IR: 0x01D00FB3

Step 2 => Decode:
    Instruction (IR): 0x01D00FB3
    Opcode: 0x00000033
    Type: R-Type
    rd: x31    rs1: x0    rs2: x29
    funct3: 0x00000000    funct7: 0x00000000

Step 3 => Execute:
    add: x31 = 0x00000000 + 0x00000005

Step 4 => Memory Access:

Step 5 => Write back:
    x31 updated to 0x00000005

=============================== 

## Clock cycle: 0000000E ##

Step 1 => Fetch:
    PC: 0x00000020  |  Fetched IR: 0xFE0008E3

Step 2 => Decode:
    Instruction (IR): 0xFE0008E3
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x0
    funct3: 0x00000000    Immediate: 0xFFFFFFF0

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000010

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 0000000F ##

Step 1 => Fetch:
    PC: 0x00000010  |  Fetched IR: 0x01E00A63

Step 2 => Decode:
    Instruction (IR): 0x01E00A63
    Opcode: 0x00000063
    Type: B-Type
    rs1: x0    rs2: x30
    funct3: 0x00000000    Immediate: 0x00000014

Step 3 => Execute:
    beq: taken | Branch taken, New PC: 0x00000024

Step 4 => Memory Access:

Step 5 => Write back:

=============================== 

## Clock cycle: 00000010 ##

Step 1 => Fetch:
    PC: 0x00000024  |  Fetched IR: 0x01F2A623

Step 2 => Decode:
    Instruction (IR): 0x01F2A623
    Opcode: 0x00000023
    Type: S-Type
    rs1: x5    rs2: x31
    funct3: 0x00000002    Immediate: 0x0000000C

Step 3 => Execute:
    Store Effective Address: 0x10000000 + 0x0000000C = 0x1000000C

Step 4 => Memory Access:
    sw store 0x00000005 to addresses starting at 0x1000000C

Step 5 => Write back:

=============================== 

## Clock cycle: 00000011 ##

Step 1 => Fetch:
    PC: 0x00000028  |  Fetched IR: 0x00C2AF83

Step 2 => Decode:
    Instruction (IR): 0x00C2AF83
    Opcode: 0x00000003
    Type: I-Type
    rd: x31    rs1: x5
    funct3: 0x00000002    Immediate: 0x0000000C

Step 3 => Execute:
    Load Effective Address: 0x10000000 + 0x0000000C = 0x1000000C

Step 4 => Memory Access:
    lw from address 0x1000000C => 0x00000005

Step 5 => Write back:
    x31 updated to 0x00000005 (loaded)

=============================== 

## Clock cycle: 00000012 ##

Step 1 => Fetch:
    PC: 0x0000002C  |  Fetched IR: 0x005F8F93

Step 2 => Decode:
    Instruction (IR): 0x005F8F93
    Opcode: 0x00000013
    Type: I-Type
    rd: x31    rs1: x31
    funct3: 0x00000000    Immediate: 0x00000005

Step 3 => Execute:
    addi: x31 = 0x00000005 + 0x00000005

Step 4 => Memory Access:

Step 5 => Write back:
    x31 updated to 0x0000000A

=============================== 

## Clock cycle: 00000013 ##

Step 1 => Fetch:
    PC: 0x00000030  |  Fetched IR: 0x01F2A623

Step 2 => Decode:
    Instruction (IR): 0x01F2A623
    Opcode: 0x00000023
    Type: S-Type
    rs1: x5    rs2: x31
    funct3: 0x00000002    Immediate: 0x0000000C

Step 3 => Execute:
    Store Effective Address: 0x10000000 + 0x0000000C = 0x1000000C

Step 4 => Memory Access:
    sw store 0x0000000A to addresses starting at 0x1000000C

Step 5 => Write back:

=============================== 

No instruction found at PC = 0x00000034. Halting.
